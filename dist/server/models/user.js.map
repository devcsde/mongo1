{"version":3,"sources":["../../../server/models/user.js"],"names":["mongoose","require","validator","jwt","_","UserSchema","Schema","firstName","type","String","trim","lastName","email","required","minlength","unique","validate","isAsync","isEmail","message","password","tokens","access","token","methods","toJSON","user","userObject","toObject","pick","generateAuthToken","sign","_id","toHexString","toString","push","save","then","statics","findByToken","User","decoded","verify","e","Promise","reject","findOne","model","module","exports"],"mappings":";;AAAA;;;AAGA;AACA;AACA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,YAAYD,QAAQ,WAAR,CAAlB;AACA,IAAME,MAAMF,QAAQ,cAAR,CAAZ;AACA,IAAMG,IAAIH,QAAQ,QAAR,CAAV;;AAEA,IAAII,aAAa,IAAIL,SAASM,MAAb,CAAoB;AACjCC,eAAW;AACPC,cAAMC,MADC;AAEPC,cAAM;AAFC,KADsB;AAKjCC,cAAU;AACNH,cAAMC,MADA;AAENC,cAAM;AAFA,KALuB;AASjCE,WAAO;AACHJ,cAAMC,MADH;AAEHI,kBAAU,IAFP;AAGHC,mBAAW,CAHR;AAIHJ,cAAM,IAJH;AAKHK,gBAAQ,IALL;AAMHC,kBAAU;AACNC,qBAAS,KADH;AAENf,uBAAWA,UAAUgB,OAFf;AAGNC,qBAAS;AAHH;AANP,KAT0B;AAqBjCC,cAAU;AACNZ,cAAMC,MADA;AAENI,kBAAU,IAFJ;AAGNC,mBAAW;AAHL,KArBuB;AA0BjCO,YAAQ,CAAC;AACLC,gBAAQ;AACJd,kBAAMC,MADF;AAEJI,sBAAU;AAFN,SADH;AAKLU,eAAO;AACHf,kBAAMC,MADH;AAEHI,sBAAU;AAFP;AALF,KAAD;AA1ByB,CAApB,CAAjB;;AAsCAR,WAAWmB,OAAX,CAAmBC,MAAnB,GAA4B,YAAY;AACpC,QAAIC,OAAO,IAAX;AACA,QAAIC,aAAaD,KAAKE,QAAL,EAAjB;AACA,WAAOxB,EAAEyB,IAAF,CAAOF,UAAP,EAAmB,CAAC,KAAD,EAAQ,OAAR,CAAnB,CAAP;AACH,CAJD;;AAMAtB,WAAWmB,OAAX,CAAmBM,iBAAnB,GAAuC,YAAY;AAC/C,QAAIJ,OAAO,IAAX;AACA,QAAIJ,SAAS,MAAb;AACA,QAAIC,QAAQpB,IAAI4B,IAAJ,CAAS;AACjBC,aAAKN,KAAKM,GAAL,CAASC,WAAT,EADY;AAEjBX;AAFiB,KAAT,EAGT,QAHS,EAGCY,QAHD,EAAZ;;AAKAR,SAAKL,MAAL,CAAYc,IAAZ,CAAiB;AACbb,sBADa;AAEbC;AAFa,KAAjB;;AAKA,WAAOG,KAAKU,IAAL,GAAYC,IAAZ,CAAiB,YAAM;AAC1B,eAAOd,KAAP;AACH,KAFM,CAAP;AAGH,CAhBD;;AAkBAlB,WAAWiC,OAAX,CAAmBC,WAAnB,GAAiC,UAAUhB,KAAV,EAAiB;AAC9C,QAAIiB,OAAO,IAAX;AACA,QAAIC,gBAAJ;;AAEA,QAAI;AACAA,kBAAUtC,IAAIuC,MAAJ,CAAWnB,KAAX,EAAkB,QAAlB,CAAV;AAEH,KAHD,CAGE,OAAOoB,CAAP,EAAU;AACR;AACA;AACA;AACA,eAAOC,QAAQC,MAAR,EAAP;AACH;;AAED,WAAOL,KAAKM,OAAL,CAAa;AAChB,eAAOL,QAAQT,GADC;AAEhB,wBAAgBT,KAFA;AAGhB,yBAAiB;AAHD,KAAb,CAAP;AAKH,CAnBD;;AAqBA,IAAIiB,OAAOxC,SAAS+C,KAAT,CAAe,OAAf,EAAwB1C,UAAxB,CAAX;;AAEA2C,OAAOC,OAAP,GAAiB,EAACT,UAAD,EAAjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"user.js","sourcesContent":["/**\r\n * Created by csche on 19.07.2017.\r\n */\r\n// User\r\n// email - require - trim - set type - set min length of 1\r\nconst mongoose = require(\"mongoose\");\r\nconst validator = require(\"validator\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst _ = require(\"lodash\");\r\n\r\nlet UserSchema = new mongoose.Schema({\r\n    firstName: {\r\n        type: String,\r\n        trim: true\r\n    },\r\n    lastName: {\r\n        type: String,\r\n        trim: true\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: true,\r\n        minlength: 6,\r\n        trim: true,\r\n        unique: true,\r\n        validate: {\r\n            isAsync: false,\r\n            validator: validator.isEmail,\r\n            message: \"{VALUE} is not a valid email\"\r\n        }\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: true,\r\n        minlength: 6\r\n    },\r\n    tokens: [{\r\n        access: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        token: {\r\n            type: String,\r\n            required: true\r\n        }\r\n    }]\r\n});\r\n\r\nUserSchema.methods.toJSON = function () {\r\n    let user = this;\r\n    let userObject = user.toObject();\r\n    return _.pick(userObject, [\"_id\", \"email\"]);\r\n};\r\n\r\nUserSchema.methods.generateAuthToken = function () {\r\n    let user = this;\r\n    let access = \"auth\";\r\n    let token = jwt.sign({\r\n        _id: user._id.toHexString(),\r\n        access\r\n    }, \"abc123\").toString();\r\n    \r\n    user.tokens.push({\r\n        access, \r\n        token\r\n    });\r\n    \r\n    return user.save().then(() => {\r\n        return token;\r\n    });\r\n};\r\n\r\nUserSchema.statics.findByToken = function (token) {\r\n    let User = this;\r\n    let decoded;\r\n\r\n    try {\r\n        decoded = jwt.verify(token, \"abc123\");\r\n\r\n    } catch (e) {\r\n        // return new Promise((resolve, reject) => {\r\n        //     reject();\r\n        // });\r\n        return Promise.reject();\r\n    }\r\n\r\n    return User.findOne({\r\n        \"_id\": decoded._id,\r\n        \"tokens.token\": token,\r\n        \"tokens.access\": \"auth\"\r\n    })\r\n};\r\n\r\nlet User = mongoose.model(\"Users\", UserSchema);\r\n\r\nmodule.exports = {User};\r\n\r\n// let user1 = new User({\r\n//     firstName: \"Chris\",\r\n//     email: \"mail@mil.de\"\r\n// });\r\n//\r\n// user1.save().then((res) => {\r\n//    console.log(JSON.stringify(res, undefined, 2));\r\n// });\r\n\r\n// let user2 = new User({\r\n//     firstName: \"Tom\",\r\n//     lastName: \"Kruger\"\r\n// });\r\n//\r\n// user2.save().then((res) => {\r\n//     console.log(JSON.stringify(res, undefined, 2));\r\n// });"]}