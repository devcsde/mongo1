{"version":3,"sources":["../../../server/models/user.js"],"names":["mongoose","require","validator","jwt","_","bcrypt","UserSchema","Schema","firstName","type","String","trim","lastName","email","required","minlength","unique","validate","isAsync","isEmail","message","password","tokens","access","token","methods","toJSON","user","userObject","toObject","pick","generateAuthToken","sign","_id","toHexString","process","env","JWT_SECRET","toString","push","save","then","removeToken","update","$pull","statics","findByToken","User","decoded","verify","e","Promise","reject","findOne","findByCredentials","resolve","compare","err","res","pre","next","isModified","genSalt","salt","hash","model","module","exports"],"mappings":"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","file":"user.js","sourcesContent":["/**\r\n * Created by csche on 19.07.2017.\r\n */\r\n// User\r\n// email - require - trim - set type - set min length of 1\r\nconst mongoose = require(\"mongoose\");\r\nconst validator = require(\"validator\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst _ = require(\"lodash\");\r\nconst bcrypt = require(\"bcryptjs\");\r\n\r\nlet UserSchema = new mongoose.Schema({\r\n    firstName: {\r\n        type: String,\r\n        trim: true\r\n    },\r\n    lastName: {\r\n        type: String,\r\n        trim: true\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: true,\r\n        minlength: 6,\r\n        trim: true,\r\n        unique: true,\r\n        validate: {\r\n            isAsync: false,\r\n            validator: validator.isEmail,\r\n            message: \"{VALUE} is not a valid email\"\r\n        }\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: true,\r\n        minlength: 6\r\n    },\r\n    tokens: [{\r\n        access: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        token: {\r\n            type: String,\r\n            required: true\r\n        }\r\n    }]\r\n});\r\n\r\nUserSchema.methods.toJSON = function () {\r\n    let user = this;\r\n    let userObject = user.toObject();\r\n    return _.pick(userObject, [\"_id\", \"email\"]);\r\n};\r\n\r\nUserSchema.methods.generateAuthToken = function () {\r\n    let user = this;\r\n    let access = \"auth\";\r\n    let token = jwt.sign({\r\n        _id: user._id.toHexString(),\r\n        access\r\n    }, process.env.JWT_SECRET).toString();\r\n    \r\n    user.tokens.push({\r\n        access, \r\n        token\r\n    });\r\n    \r\n    return user.save().then(() => {\r\n        return token;\r\n    });\r\n};\r\n\r\nUserSchema.methods.removeToken = function (token) {\r\n    var user = this;\r\n    return user.update({\r\n        $pull: {\r\n            tokens: {token}\r\n        }\r\n    });\r\n};\r\n\r\nUserSchema.statics.findByToken = function (token) {\r\n    let User = this;\r\n    let decoded;\r\n\r\n    try {\r\n        decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n\r\n    } catch (e) {\r\n        // return new Promise((resolve, reject) => {\r\n        //     reject();\r\n        // });\r\n        return Promise.reject();\r\n    }\r\n\r\n    return User.findOne({\r\n        \"_id\": decoded._id,\r\n        // query a nested document in db array with \"\"\r\n        \"tokens.token\": token,\r\n        \"tokens.access\": \"auth\"\r\n    });\r\n};\r\n\r\nUserSchema.statics.findByCredentials = function (email, password) {\r\n    let User = this;\r\n\r\n    return User.findOne({email}).then((user) => {\r\n        if(!user){\r\n            return Promise.reject();\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            bcrypt.compare(password, user.password, (err, res) => {\r\n                if (res){\r\n                    resolve(user);\r\n                } else {\r\n                    reject();\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n};\r\n\r\n\r\n//middleware always needs next\r\nUserSchema.pre(\"save\", function (next) {\r\n    let user = this;\r\n\r\n    if (user.isModified(\"password\")){\r\n        bcrypt.genSalt(10, (err, salt) => {\r\n            bcrypt.hash(user.password, salt, (err, hash) => {\r\n                user.password = hash;\r\n                next();\r\n            });\r\n        });\r\n    } else {\r\n        next();\r\n    }\r\n});\r\n\r\nlet User = mongoose.model(\"Users\", UserSchema);\r\n\r\nmodule.exports = {User};\r\n\r\n// let user1 = new User({\r\n//     firstName: \"Chris\",\r\n//     email: \"mail@mil.de\"\r\n// });\r\n//\r\n// user1.save().then((res) => {\r\n//    console.log(JSON.stringify(res, undefined, 2));\r\n// });\r\n\r\n// let user2 = new User({\r\n//     firstName: \"Tom\",\r\n//     lastName: \"Kruger\"\r\n// });\r\n//\r\n// user2.save().then((res) => {\r\n//     console.log(JSON.stringify(res, undefined, 2));\r\n// });"]}